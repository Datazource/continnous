#!/usr/bin/env node

/* eslint-disable no-console */

const program = require('commander');
const cp = require('child_process');
const fs = require('fs');
const extend = require('extend');
const Permissions = require('../src/models/Permissions');
const Flashlight = require('../src/models/Flashlight');
const Config = require('../src/models/Config');

const tmpFile = './continnous.json';

program
  .command('privileges')
  .option('-d, --dry-run', 'Only print data that would be written')
  .action((options) => {
    const organizations = JSON.parse(cp.execSync('firebase database:get /organizations'));
    const defaultPermissions = Permissions.getDefaults();
    const l = Object.keys(organizations).length;
    let i = 0;
    console.log('Received ' + l + ' objects');
    Object.keys(organizations).forEach((organizationKey) => {
      i++;
      console.log(i + '/' + l + ': ' + organizationKey);
      const path = '/security/organizations/' + organizationKey + '/permissions';
      console.log('  - reading permissions');
      const permissions = extend(true, {}, defaultPermissions, JSON.parse(cp.execSync('firebase database:get ' + path)));
      Object.keys(permissions).forEach((group) => {
        if (!defaultPermissions.hasOwnProperty(group)) {
          permissions[group] = null;
        } else {
          Object.keys(permissions[group]).forEach((resource) => {
            if (!defaultPermissions[group].hasOwnProperty(resource)) {
              permissions[group][resource] = null;
            }
          });
        }
      });

      const flashlightPermissions = {};
      Object.keys(defaultPermissions).forEach((group) => {
        Object.keys(defaultPermissions[group]).forEach((resource) => {
          if (!flashlightPermissions.hasOwnProperty(resource)) {
            flashlightPermissions[resource] = { read: false };
          }
          if (permissions[group][resource].read) {
            flashlightPermissions[resource].read = true;
          }
        });
      });
      const flashlightPaths = Flashlight.getPaths(organizationKey, 'organization', flashlightPermissions);

      if (options.dryRun) {
        console.log(JSON.stringify(permissions, null, 2));
        console.log(JSON.stringify(flashlightPaths, null, 2));
        return;
      }
      console.log('  - updating permissions');
      fs.writeFileSync(tmpFile, JSON.stringify(permissions));
      cp.execSync('firebase database:set -y ' + path + ' ' + tmpFile);
      console.log('  - updating flashlight paths');
      fs.writeFileSync(tmpFile, JSON.stringify(flashlightPaths));
      cp.execSync('firebase database:update -y ' + Config.flashlight.paths.paths + ' ' + tmpFile);
      console.log('  - done');
    });
    if (l > 0 && !options.dryRun) {
      fs.unlinkSync(tmpFile);
    }
  });

program.parse(process.argv);
